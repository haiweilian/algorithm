// [「硬核 JS」数字之美](https://juejin.cn/post/6897949585558208525)
// [二进制和十进制之间的互相转换](https://zhuanlan.zhihu.com/p/75291280)
// [进制转换 - 在线工具](https://tool.oschina.net/hexconvert)
/**
 * @name 通用性:位运算操作的是整数，大部分位运算都可以取整，只是用法不同。
 */
console.log("按位非", ~~1.111, ~~1.999)
console.log("按位或", 1.111 | 0, 1.999 | 0)
console.log("按位异", 1.111 ^ 1.999)
console.log("左移", 1.111 << 0, 1.999 << 0)
console.log("右移", 1.111 >> 0, 1.999 >> 0)

/**
 * @name 按位非 NOT（~）
 */
console.log("按位非==============================")
// 按位非操作符也可以叫按位取反，它使用 ~ 符号表示，作用是把二进制的对位取反，1 变成 0 ，0 变成 1。

// ---------------取值
// 秘诀：始终是对原数值取反并减一 (~x = (-x) - 1)

let x = 1
~x == -x - 1 // true
console.log(~x, -x - 1) // -2, -2

x = -1
~x == -x - 1 // true
console.log(~x, -x - 1) // 0, 0

/**
 * @name 按位与 AND（&）
 */
console.log("按位与==============================")
// 按位与操作符也就是符号 & ，它有两个操作数，其实就是将两个操作数的二进制每一位进行对比，两个操作数相应的位都为 1 时，结果为 1，否则都为 0，如下

// ---------------使用按位与 & 判断奇偶数
// 偶数 & 1 // 0
// 奇数 & 1 // 1
console.log(2 & 1) // = 0
console.log(1 & 1) // = 1
console.log(0 & 1) // = 0

// ---------------使用按位与 & 判断数字是否为2的整数幂
// 秘诀：n & (n - 1) 套用这个小公式，当结果等于 0 时，数值就是 2 的整数幂

let a = 20
let b = 32

console.log(a & (a - 1)) // 16  a 不是 2 的整数幂
console.log(b & (b - 1)) // 0 	b 是 2 的整数幂

/**
 * @name 按位或 OR（｜）
 */
console.log("按位或==============================")
// 按位或用符号 | 来表示，它也有两个操作数，按位或也是将两个操作数二进制的每一位进行对比，只不过按位或是两边只要有一个 1 ，结果就是 1，只有两边都是 0 ，结果才为 0

// ---------------使用按位或 | 代替 Math.round()
// 已知按位或可以取整，整数 + 0.5 ，负数 - 0.5
console.log((1.3 + 0.5) | 0) // 1
console.log((1.6 + 0.5) | 0) // 2
console.log((-1.3 - 0.5) | 0) // -1
console.log((-1.6 - 0.5) | 0) // -2

/**
 * @name 按位异或 XOR（^）
 */
console.log("按位异==============================")
// 按位异或使用字符 ^ 来表示，按位异或和按位或的区别其实就是在比对时，按位异或只在一位是 1 时返回 1，两位都是 1 或者两位都是 0 都返回 0

// ---------------使用按位异或 ^ 判断整数部分是否相等
// 当结果等于 0 时相等
console.log(1 ^ 2) // 3
console.log(2 ^ 2) // 0
console.log(2.1 ^ 2.9) // 0

// ---------------使用按位异或 ^ 切换 0 和 1
// 切换 0 和 1，即当变量等于 0 时，将它变成 1，当变量等于 1 时，将它变成 0
let at = 0
console.log((at ^= 1)) // 1
console.log((at ^= 1)) // 0
console.log((at ^= 1)) // 1
console.log((at ^= 1)) // 0

/**
 * @name 左移（<<）
 */
console.log("左移==============================")
// 左移用符号 << 来表示，正如它的名字，即将数值的二进制码按照指定的位数向左移动，符号位不变

// ---------------取值
// 秘诀： x << y =  x * 2^y = x 乘以 y 的二次方
let x1 = 1
let y1 = 2
console.log(x1 << y1) // 4
console.log(x1 << y1 === x1 * Math.pow(2, y1)) // true

/**
 * @name 右移（>>）
 */
console.log("右移==============================")
// 有符号右移用符号 >> 来表示，即将数值的二进制码按照指定的位数向右移动，符号位不变，它和左移相反

// ---------------取值
// 秘诀： x >> y = Math.floor(x / 2^y) = x 除以 y 的二次方 向下取整
let x2 = 1
let y2 = 2
console.log(x2 >> y2) // 0
console.log(x2 >> y2 === Math.floor(x2 / Math.pow(2, y2))) // true
